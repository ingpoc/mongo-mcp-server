# Model Context Protocol (MCP) Implementation Guide

## Core Implementation Steps

### 1. Project Structure
```
your-project/
├── src/
│   └── your_package/
│       ├── __init__.py
│       ├── server.py      # Main MCP server
│       ├── config.py      # Configuration
│       ├── resources/     # Resource implementations
│       └── tools/         # Tool implementations
├── tests/
├── requirements.txt
└── README.md
```

### 2. Essential Dependencies
```txt
mcp>=1.0.0
fastapi>=0.109.0
uvicorn>=0.27.0
```

### 3. Basic Server Implementation
```python
"""server.py - Main MCP Server Implementation"""
from mcp.server import Server, NotificationOptions
from mcp.server.models import InitializationOptions
from mcp.server.stdio import stdio_server
from mcp.types import TextContent, Tool, Resource
import logging
import asyncio

# Configure logging
logging.basicConfig(
    level="INFO",
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize MCP Server
server = Server(name="your-server-name")

@server.list_resources()
async def list_resources() -> List[Resource]:
    return [
        Resource(
            name="resource_name",
            uri="protocol://path",
            display_name="Display Name",
            description="Description"
        )
    ]

@server.read_resource()
async def read_resource(uri: str) -> str:
    try:
        # Resource reading logic
        return "resource content"
    except Exception as e:
        logger.error(f"Resource error: {e}")
        return f"Error reading resource: {str(e)}"

@server.list_tools()
async def list_tools() -> List[Tool]:
    return [
        Tool(
            name="tool_name",
            display_name="Tool Display",
            description="Tool description",
            inputSchema={
                "type": "object",
                "title": "Parameters",
                "properties": {
                    "param": {
                        "type": "string",
                        "description": "Parameter description"
                    }
                },
                "required": ["param"]
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: Dict) -> List[TextContent]:
    try:
        # Tool execution logic
        return [TextContent(text="result")]
    except Exception as e:
        logger.error(f"Tool error: {e}")
        return [TextContent(text=f"Error: {str(e)}")]

async def run_server():
    """Run the MCP server with stdio transport."""
    logger.info("Starting MCP server...")
    try:
        async with stdio_server() as (read_stream, write_stream):
            logger.info("MCP server stdio transport initialized")
            init_options = InitializationOptions(
                server_name="your-server-name",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={}
                )
            )
            await server.run(read_stream, write_stream, init_options)
    except Exception as e:
        logger.error(f"Server error: {e}")

if __name__ == "__main__":
    asyncio.run(run_server())
```

### 4. Configuration Setup
```python
"""config.py - Configuration Settings"""
import os

# Server Configuration
SERVER_NAME = os.getenv('SERVER_NAME', 'your-server-name')
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')

# Optional HTTP Server Config
HOST = os.getenv('HOST', '127.0.0.1')
PORT = int(os.getenv('PORT', '8000'))
```

### 5. Resource Implementation Pattern
```python
"""resources/base.py - Base Resource Implementation"""
from mcp.types import Resource, TextContent
from typing import Dict, Any, Optional

class BaseResource(Resource):
    def __init__(self, name: str, **kwargs):
        super().__init__(
            name=name,
            uri=f"protocol://{name}",
            display_name=kwargs.get('display_name', name),
            description=kwargs.get('description', '')
        )

    async def get_content(self) -> str:
        try:
            # Resource content retrieval logic
            return "content"
        except Exception as e:
            return f"Error: {str(e)}"
```

### 6. Tool Implementation Pattern
```python
"""tools/base.py - Base Tool Implementation"""
from mcp.types import Tool, TextContent
from typing import Dict, Any, List

class BaseTool(Tool):
    def __init__(self, name: str, **kwargs):
        super().__init__(
            name=name,
            display_name=kwargs.get('display_name', name),
            description=kwargs.get('description', ''),
            inputSchema={
                "type": "object",
                "title": "Parameters",
                "properties": self.get_parameters(),
                "required": self.get_required_parameters()
            }
        )

    def get_parameters(self) -> Dict:
        return {}

    def get_required_parameters(self) -> List[str]:
        return []

    async def execute(self, params: Dict[str, Any]) -> List[TextContent]:
        try:
            # Tool execution logic
            return [TextContent(text="result")]
        except Exception as e:
            return [TextContent(text=f"Error: {str(e)}")]
```

### 7. Testing Setup
```python
"""test_server.py - Server Testing"""
from mcp import ClientSession
from mcp.client.stdio import stdio_client
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_server():
    server_params = StdioServerParameters(
        command="python",
        args=["-m", "src.your_package.server"],
        env={"PYTHONPATH": "path/to/project"}
    )

    try:
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                await session.initialize()
                resources = await session.list_resources()
                tools = await session.list_tools()
                logger.info(f"Resources: {resources}")
                logger.info(f"Tools: {tools}")
    except Exception as e:
        logger.error(f"Test error: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(test_server())
```

### 8. Claude Desktop Configuration
```json
{
    "your-service": {
        "command": "python",
        "args": [
            "-m",
            "src.your_package.server"
        ],
        "env": {
            "PYTHONPATH": "path/to/your/project",
            "LOG_LEVEL": "INFO"
        }
    }
}
```

## Implementation Guidelines

### 1. Server Implementation
- Use meaningful server names
- Implement proper error handling
- Use async/await consistently
- Log important operations
- Handle startup/shutdown gracefully

### 2. Resource Implementation
- Clear, unique resource names
- Descriptive URIs
- Proper error handling
- Efficient data access
- Clear documentation

### 3. Tool Implementation
- Clear parameter schemas with titles
- Input validation
- Proper error handling
- Clear feedback messages
- Idempotent operations

### 4. Error Handling
- Catch and log all exceptions
- Return meaningful error messages
- Don't expose internal details
- Use proper error types
- Implement recovery strategies

### 5. Testing
- Test stdio communication
- Verify resource access
- Validate tool execution
- Check error handling
- Test edge cases

### 6. Security
- Validate all inputs
- Sanitize data
- Check permissions
- Handle errors safely
- Protect resources

### 7. Performance
- Efficient resource usage
- Proper connection handling
- Resource cleanup
- Error recovery
- Logging optimization

## Deployment Steps

1. Project Setup:
   ```bash
   python -m venv .venv
   source .venv/bin/activate  # or .venv\Scripts\activate on Windows
   pip install -r requirements.txt
   ```

2. Testing:
   ```bash
   python -m src.your_package.test_server
   ```

3. Claude Desktop Integration:
   - Update config file
   - Set PYTHONPATH
   - Configure environment
   - Restart Claude Desktop

4. Verification:
   - Check server logs
   - Test resource access
   - Verify tool execution
   - Monitor performance

## Important Notes

1. Always use stdio transport for Claude Desktop
2. Implement proper error handling
3. Use async/await consistently
4. Log important operations
5. Test thoroughly before deployment
6. Keep security in mind
7. Document everything clearly

These instructions provide a foundation for implementing MCP servers that work reliably with Claude Desktop.