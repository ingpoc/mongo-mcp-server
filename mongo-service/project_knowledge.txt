# Model Context Protocol (MCP) Knowledge Base

## MCP Core Concepts

### 1. Overview
- MCP is a protocol for connecting AI models with data sources and tools
- Uses stdio as primary transport mechanism
- Supports both synchronous and asynchronous operations
- Resource and Tool based architecture

### 2. Key Components
```python
from mcp.server import Server
from mcp.types import TextContent, Tool, Resource
from mcp.server.stdio import stdio_server
from mcp.server.models import InitializationOptions

# Core Server
server = Server(name="your-server-name")

# Resources - Data Access Points
@server.list_resources()
async def list_resources() -> List[Resource]

# Tools - Action Executors
@server.list_tools()
async def list_tools() -> List[Tool]
```

### 3. Resource Pattern
```python
Resource(
    name="resource_name",      # Unique identifier
    uri="protocol://path",     # Resource location
    display_name="Display",    # Human-readable name
    description="Details"      # Resource description
)
```

### 4. Tool Pattern
```python
Tool(
    name="tool_name",          # Unique identifier
    display_name="Display",    # Human-readable name
    description="Details",     # Tool description
    inputSchema={             # JSON Schema for input
        "type": "object",
        "title": "Parameters",
        "properties": {
            "param1": {"type": "string"}
        },
        "required": ["param1"]
    }
)
```

## Protocol Implementation

### 1. Server Implementation
```python
# Initialize server
server = Server(name="your-server")

# Setup stdio transport
async def run_server():
    async with stdio_server() as (read, write):
        init_options = InitializationOptions(
            server_name="your-server",
            server_version="1.0.0"
        )
        await server.run(read, write, init_options)
```

### 2. Resource Implementation
```python
@server.list_resources()
async def list_resources() -> List[Resource]:
    return [
        Resource(
            name="example_resource",
            uri="protocol://path",
            display_name="Example",
            description="Resource description"
        )
    ]

@server.read_resource()
async def read_resource(uri: str) -> str:
    # Resource reading logic
    return "resource content"
```

### 3. Tool Implementation
```python
@server.list_tools()
async def list_tools() -> List[Tool]:
    return [
        Tool(
            name="example_tool",
            display_name="Example Tool",
            description="Tool description",
            inputSchema={
                "type": "object",
                "title": "Parameters",
                "properties": {}
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: Dict) -> List[TextContent]:
    return [TextContent(text="result")]
```

## Claude Desktop Integration

### 1. Configuration
```json
{
    "your-service": {
        "command": "python",
        "args": [
            "-m",
            "your.package.server"
        ],
        "env": {
            "PYTHONPATH": "path/to/your/project"
        }
    }
}
```

### 2. Communication Flow
1. Claude Desktop launches server using config
2. Server initializes with stdio transport
3. Resource/Tool discovery happens automatically
4. Claude can access resources and execute tools

## Error Handling Patterns

### 1. Resource Errors
```python
async def handle_resource_error(e: Exception) -> str:
    error_msg = f"Resource error: {str(e)}"
    logger.error(error_msg)
    return error_msg
```

### 2. Tool Errors
```python
async def handle_tool_error(e: Exception) -> List[TextContent]:
    error_msg = f"Tool error: {str(e)}"
    logger.error(error_msg)
    return [TextContent(text=error_msg)]
```

## Testing Patterns

### 1. Server Testing
```python
from mcp import ClientSession
from mcp.client.stdio import stdio_client

async def test_server():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            resources = await session.list_resources()
            tools = await session.list_tools()
```

### 2. Resource Testing
```python
async def test_resource():
    resources = await session.list_resources()
    content = await session.read_resource(resources[0].uri)
```

### 3. Tool Testing
```python
async def test_tool():
    tools = await session.list_tools()
    result = await session.call_tool(
        tools[0].name,
        {"param": "value"}
    )
```

## Best Practices

### 1. Server Design
- Use meaningful server names
- Handle startup/shutdown gracefully
- Implement proper error handling
- Use async/await consistently
- Log important operations

### 2. Resource Design
- Clear, unique resource names
- Descriptive URIs
- Proper error handling
- Efficient data access
- Clear documentation

### 3. Tool Design
- Clear parameter schemas
- Input validation
- Proper error handling
- Clear feedback messages
- Idempotent operations

### 4. Testing
- Test stdio communication
- Verify resource access
- Validate tool execution
- Check error handling
- Test edge cases

## Deployment Guidelines

### 1. Environment Setup
- Set PYTHONPATH correctly
- Configure logging
- Set environment variables
- Handle dependencies

### 2. Claude Desktop Integration
- Correct command configuration
- Proper argument structure
- Environment variable setup
- Path configuration

### 3. Monitoring
- Log important operations
- Handle errors gracefully
- Monitor performance
- Track resource usage

## Security Considerations

### 1. Input Validation
- Validate all inputs
- Sanitize data
- Check permissions
- Handle errors safely

### 2. Resource Protection
- Access control
- Input validation
- Rate limiting
- Error handling

### 3. Error Messages
- Don't expose internals
- Clear user messages
- Proper logging
- Secure error handling

## Reference Resources
1. MCP Documentation: https://modelcontextprotocol.io/
2. Python SDK Docs: https://github.com/modelcontextprotocol/python-sdk
3. Best Practices: https://modelcontextprotocol.io/docs/best-practices